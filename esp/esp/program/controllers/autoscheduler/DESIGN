Optimize for:
    - Easy to change
    - Robust against regressions
    - Flexible to match requirements
    - Efficient for speed
    - Useful schedules

Necessary interactions
    - Load from website
    - Verify constraints are met
    - Compute score
    - Find possible (or random) changes
    - Make changes

Model
    - Classes:
        - Resource requests
        - Size
        - Teachers
        - Duration
    - Teachers:
        - Availability
        - Is admin?
    - Rooms
        - Availability
        - Size
        - Resources
        - Proximity
    - Timeslots
        - Contiguity

Algorithmic complexity
    - 1000 classes
    - 1000 teachers
    - 100 rooms
    - 10 timeslots
    - Moves:
        - Schedule a class: 1000 * 100 * 10 = 10^6
        - Move a scheduled class: 1000 * 100 * 10 = 10^6  (has different
          chaining behaviors from scheduling a class)
        - Unschedule a class: 1000
        - Swap two classes: 1000
        - Chain of related moves: >10^9

